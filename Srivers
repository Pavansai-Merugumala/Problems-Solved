1.Maximum Subarray Sum
import java.util.* ;
import java.io.*; 

public class Solution {
	
	public static long maxSubarraySum(int[] arr, int n) {
		int maxsofar=arr[0];
		int maxendinghere=arr[0];
		
	
		
		
		for(int i=1;i<n;i++){
			maxendinghere=Math.max(arr[i],maxendinghere+arr[i]);
			maxsofar=Math.max(maxendinghere,maxsofar);
			

		}
		if(maxsofar<0)
		return 0;
		return maxsofar;
	}
	

}


2.Sort 0 1 import java.util.* ;
import java.io.*; 
public class Solution 
{

    public static void sort012(int[] arr)
    {
    
        ArrayList<Integer> nums=new ArrayList<Integer>();
        for(int i=0;i<arr.length;i++){
            nums.add(arr[i]);
        }
        Collections.sort(nums);
        for(int j=0;j<arr.length;j++){
            for(int k:nums){
                arr[j]=k;
            }
        }
        
    
    }
}


3.Best Time to Buy and Sell Stock
import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution{
    public static int maximumProfit(ArrayList<Integer> prices){
        int n=prices.size();
        int maxbuy=prices.get(0);
        int maxprofit=0;
        for(int i=1;i<n;i++){
            if(maxbuy>prices.get(i)){
                maxbuy=prices.get(i);
            }
            else if(prices.get(i)-maxbuy>maxprofit){
                maxprofit=prices.get(i)-maxbuy;
            }

        }return maxprofit;
        
    }
}


 4.Find the Town Judge
 class Solution {
  public int findJudge(int n, int[][] trust) {
    int[] count = new int[n + 1];

    for (int[] t : trust) {
      --count[t[0]];
      ++count[t[1]];
    }

    for (int i = 1; i < n + 1; ++i)
      if (count[i] == n - 1)
        return i;

    return -1;
  }
}


5.class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                if nums[j] == target - nums[i]:
                    return [i, j]
                    
                    
6.Pascal's Triangle
class Solution {
    
public List<List<Integer>> generate(int numRows) {
    List<List<Integer>> triangle = new ArrayList<>();
    if (numRows == 0) {
        return triangle;
    }
    triangle.add(new ArrayList<>());
    triangle.get(0).add(1);
    for (int rowNum = 1; rowNum < numRows; rowNum++) {
        List<Integer> row = new ArrayList<>();
        List<Integer> prevRow = triangle.get(rowNum-1);
        row.add(1);
        for (int j = 1; j < rowNum; j++) {
            row.add(prevRow.get(j-1) + prevRow.get(j));
        }
        row.add(1);
        triangle.add(row);
    }
    return triangle;
}
}


7.Search a 2D Matrix
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(matrix[i][j]==target)
                return true;
            }
        }return false;
    }
}


8.Reverse Words in a String
class Solution {
    public String reverseWords(String s) {
        String result = "";
String[] str = s.split(" ");
for (int i = str.length - 1; i >= 0; i--) {
if (!(str[i].trim().isEmpty())) {
result = result.concat(str[i] + " ");
}
}
return result.trim();
    }
}
